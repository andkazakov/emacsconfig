#+TITLE: Конфигурация org-mode и соотв. плагинов
#+STARTUP: overview
#+BABEL: auto-tangle

Настраиваем переменные для поиска файлов

- ~org-agenda-files~ - переменная содержит список файлов, где искать todo-списки. В случае если указана директория, то обрабатываются все .org файлы в ней.
- ~org-directory~ - базовая директория для org файлов

#+begin_src elisp :tangle +org.el
(setq org-directory (concat (getenv "HOME") "/orgs"))
(setq org-roam-directory (concat org-directory "/resources"))
(setq org-journal-dir (concat org-directory "/journal"))
(setq org-roam-dailies-directory org-journal-dir)

#+end_src

Удаление открытого буфера вместе с файлом.

#+begin_src elisp

(defun andk/delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
      (message "Not a file visiting buffer!"))))
#+end_src

* Автоматическая генерация babel вставок

Если файл имеет ключевое слово *BABEL* со значением *auto-tangle* то при сохранении буфера мы автоматически генерируем все babel вставки.

#+begin_src elisp :tangle +org.el

(defun my/org-find-babel-keyword-value ()
  (let (babel)
    (org-element-map (org-element-parse-buffer) 'keyword
      (lambda (kw)
        (when (string= (org-element-property :key kw) "BABEL")
          (setq babel (org-element-property :value kw))))
    ) babel))

(defun my/org-babel-tangle-on-save ()
  (when (string= (my/org-find-babel-keyword-value) "auto-tangle")
    (org-babel-tangle)))

(add-hook 'after-save-hook #'my/org-babel-tangle-on-save)

#+end_src
* Настройка Agenda
Конфигурация параметров для Agenda - выставляем статусы, блоки

#+begin_src elisp :tangle +org.el
(setq org-agenda-prefix-format '((agenda . " %i ")
                                 (todo . " %i %-5:c")
                                 (tags . " %i %-5:c")
                                 (search . " %i %-5:c")))

(setq org-agenda-files (list
                        (concat org-directory "/inbox.org")
                        (concat org-directory "/habits.org")))

(after! org
  ;; исключаем тег EPIC из наследования, чтобы он ставился только на файл
  (setq org-tags-exclude-from-inheritance
        (append '("EPIC" "area") org-tags-exclude-from-inheritance))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "DELEGATED(g)" "|" "DONE(d)")
          (sequence "PROJ(p)" "WIP(a)" "|" "DONE(d)")
          (sequence "MEETING" "|" "DONE")))

  (setq org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("NEXT" . "dark orange")
          ("DELEGATED" . "spring green"))))

(defun my/project-wip-next-tasks ()
  (interactive)
  (org-ql-search (org-agenda-files)
    '(and (todo "NEXT")
          (ancestors (todo "WIP")))
    :super-groups '(
                    (:auto-parent t))))

(defun my/daily-agenda ()
  (interactive)
  (org-ql-search (org-agenda-files)
    '(or (and (not (done))
              (or (habit)
                  (deadline auto)
                  (scheduled :to today)
                  (ts-active :on today)))
         (closed :on today))
    :title "Daily Agenda"
    :super-groups '((:name "Today" :todo "TODO" :order 1)
                    (:auto-parent t :name "Next" :todo "NEXT" :order 2))))

(map! :leader
      :prefix "a"
      :desc "Daily agenda" "d" #'my/daily-agenda
      :desc "WIP projects" "p" #'my/project-wip-next-tasks)
#+end_src

* Настройка capture

#+begin_src elisp :tangle +org.el
(use-package! org-capture
  :config
  (add-to-list 'org-capture-templates
               '("t" "Рабочие вопросы" entry
                 (file+headline "inbox.org" "Рабочие вопросы")
                 "* TODO %?" :empty-lines 2 :empty-lines-after 1))

  (add-to-list 'org-capture-templates
               '("c" "Рабочая заметка" item (clock) "%?" ))

  (add-to-list 'org-capture-templates
               '("r" "Прочитать" entry
                 (file+headline "inbox.org" "Прочитать/Исследовать")
                 "* TODO %?" :empty-lines 1 :empty-lines-after 1))

  (add-to-list 'org-capture-templates
               '("w" "From web" entry
                 (file+headline "inbox.org" "Прочитать/Исследовать")
                 "* TODO %?" :empty-lines 1 :empty-lines-after 1)))

#+end_src

* Настройка roam
#+begin_src elisp :tangle +org.el

(defun my/org-roam-nodes-by-tag (tags)
  "Возвращает список узлов, которые содержат теги из списка TAGS"
  (seq-filter (lambda (node)
                (let ((node-tags (org-roam-node-tags node)))
                  (cl-every (lambda (tag) (member tag node-tags)) tags)))
              (org-roam-node-list)))

(defun my/org-roam-files-by-tag (tag)
  "Возвращает список файлов по тегу из org-roam"
  (mapcar #'org-roam-node-file (my/org-roam-nodes-by-tag (list tag))))

(defun my/org-roam-files-by-tags (tags)
  "Возвращает список файлов по тегу из org-roam"
  (mapcar #'org-roam-node-file (my/org-roam-nodes-by-tag tags)))

(defun my/org-roam-node-have-tags (node tags)
  "Проверят есть ли у узла соотв. теги"
  (let* ((node-tags (org-roam-node-tags node)))
    (cl-every (lambda (tag) (member tag node-tags)) tags)))

(after! org-roam
  (defun my/org-roam-list-elfeed () (my/org-roam-files-by-tag "elfeed"))
  (defun my/org-roam-list-areas () (my/org-roam-files-by-tag "area"))
  (defun my/org-roam-list-project () (my/org-roam-files-by-tag "project")))

#+end_src

Настройка работы с контекстами и областями.

#+begin_src elisp :tangle +org.el
(after! org-roam

  (defun my/org-roam-get-code-from-area (node) (org-roam-get-keyword "CODE" node))
  (defun my/get-all-area-codes () (mapcar 'my/org-roam-get-code-from-area (my/org-roam-list-areas)))


  (defun my/org-roam-node-find-by-area (area)
    (org-roam-node-find nil nil
                        (lambda (node) (my/org-roam-node-have-tags node (list area)))))

  (defun my/org-roam-node-find-projects-by-area (area)
    (org-roam-node-find nil nil
                        (lambda (node) (my/org-roam-node-have-tags node (list area "project")))))

  (defun my/org-roam-node-find-projects ()
    (interactive)
    (org-roam-node-find nil nil
                        (lambda (node) (my/org-roam-node-have-tags node (list "project")))))

  (defun my/ivy-show-areas ()
    (interactive)
    (ivy-read "Области и контексты: " (my/get-all-area-codes)
              :action '(1
                        ("n" my/org-roam-node-find-by-area "Список заметок")
                        ("p" my/org-roam-node-find-projects-by-area "Список проектов"))))

  (map! :leader
        :prefix ("r" . "Second Brain from org-roam")
        :desc "Areas and context" "a" #'my/ivy-show-areas
        :desc "Projects" "p" #'my/org-roam-node-find-projects
        :desc "Org-roam search by tags" "t" #'org-roam-search-tags)
)

(setq org-agenda-files (append org-agenda-files (my/org-roam-files-by-tag "project")))

#+end_src

* Настройка Ever green notes плагинов

#+begin_src elisp :tangle +org.el

(use-package org-roam-dblocks
  :hook (org-mode . org-roam-dblocks-autoupdate-mode))

(use-package org-roam-search
  :commands (org-roam-search))

;; (use-package org-roam-review
;;   :commands (org-roam-review org-roam-review-list-by-maturity org-roam-review-list-recently-added)
;;   :hook (org-roam-capture-new-node . org-roam-review-set-seedling))

(use-package! org-roam-review
  :commands (org-roam-review
             org-roam-review-list-by-maturity
             org-roam-review-list-recently-added)
  ;; Optional - tag all newly-created notes as seedlings
  :hook (org-roam-capture-new-node . org-roam-review-set-seedling)
  :general
  ;; Optional - bindings for evil-mode compatability.
  (:states '(normal) :keymaps 'org-roam-review-mode-map
           "TAB" 'magit-section-cycle
           "g r" 'org-roam-review-refresh)
  (:keymaps 'org-mode-map
            "C-c r r" '(org-roam-review-accept :wk "accept")
            "C-c r f" '(org-roam-review-forgot :wk "forgot")
            "C-c r u" '(org-roam-review-bury :wk "bury")
            "C-c r x" '(org-roam-review-set-excluded :wk "set excluded")
            "C-c r b" '(org-roam-review-set-budding :wk "set budding")
            "C-c r s" '(org-roam-review-set-seedling :wk "set seedling")
            "C-c r e" '(org-roam-review-set-evergreen :wk "set evergreen")))
#+end_src
